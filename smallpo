t = (0:0.01:10);
x = 0.2*t + cos(2*pi*t) + 0.4*cos(10*pi*t);
thr = 0.2;
y = hht(x,t,thr);


figure;
plot(t,y(1,:))
title('IMF', num2str(1))
grid on

figure;
plot(t,y(2,:))
title('IMF', num2str(2))
grid on


function y = hht(x,t,thr)

    y = x;
    n = 1;
    hht_stop = 0;
    
    local_max = zeros(1,length(x));
    max_pos = zeros(1,length(x));
    local_min = zeros(1,length(x));
    min_pos = zeros(1,length(x));

    while(hht_stop == 0)
        IMF_stop = 0;
        k = 1;
        while (IMF_stop == 0 && k < 5)
        
            % reset
            max_pos = [];
            local_max = [];
            min_pos = [];
            local_min = [];
     
            % initial boundary condition
            minima = 1;
            maxima = 1;
            max_pos(1) = t(1);
            local_max(1) = y(1);
            min_pos(1) = t(1);
            local_min(1) = y(1);
        
            % step 2 ~ step 5
            for i = 2 : length(t)-1
                if(y(i) > y(i-1) && y(i) > y(i+1)) % find local maxima
                    maxima = maxima + 1;
                    max_pos(maxima) = t(i);
                    local_max(maxima) = y(i);
                end
                if(y(i) < y(i-1) && y(i) < y(i+1)) % find local minima
                    minima = minima + 1;
                    min_pos(minima) = t(i);
                    local_min(minima) = y(i);
                end
            end
        
            % final boundary condition
            minima = minima + 1;
            maxima = maxima + 1;
            max_pos(maxima) = t(length(t));
            local_max(maxima) = y(length(t));
            min_pos(minima) = t(length(t));
            local_min(minima) = y(length(t));
        
            % determine whether extremes = boundary, by interpolation method
            interpolation_max_init = local_max(2) - (max_pos(2)-max_pos(1))*(local_max(3)-local_max(2))/( max_pos(3)-max_pos(2));
            interpolation_min_init = local_min(2) - (min_pos(2)-min_pos(1))*(local_min(3)-local_min(2))/( min_pos(3)-min_pos(2));
            interpolation_max_final = local_max(maxima-1) + (max_pos(maxima)-max_pos(maxima-1))*(local_max(maxima-1)-local_max(maxima-2))/(max_pos(maxima-1)-max_pos(maxima-2));
            interpolation_min_final = local_min(minima-1) + (min_pos(minima)-min_pos(minima-1))*(local_min(minima-1)-local_min(minima-2))/(min_pos(minima-1)-min_pos(minima-2));

            if(interpolation_max_init > local_max(1,1))
                local_max(1) = interpolation_max_init;
            end

            if(interpolation_min_init < local_min(1,1))
                local_min(1) = interpolation_min_init;
            end

            if(interpolation_max_final > local_max(1,maxima))
                local_max(maxima) = interpolation_max_final;
            end

            if(interpolation_min_final < local_min(1,minima))
                local_min(minima) = interpolation_min_final;
            end
        
            % step 6
            upper_envelope = spline(max_pos,local_max,t);
            lower_envelope = spline(min_pos,local_min,t);
            z = (upper_envelope + lower_envelope)./2;    % mean
            h = y - z;    % residue

            % reset
            max_pos = [];
            local_max = [];
            min_pos = [];
            local_min = [];
            interpolation_max_init = [];
            interpolation_min_init = [];
            interpolation_max_final = [];
            interpolation_min_final = [];
            upper_envelope = [];
            lower_envelope = [];

            minima = 1;
            maxima = 1;
            max_pos(1) = t(1);
            local_max(1) = h(1);
            min_pos(1) = t(1);
            local_min(1) = h(1);

            for i = 2 : length(t)-1

                if(h(i) > h(i-1) && h(i) > h(i+1))   % find local maxima
                    maxima = maxima + 1;
                    max_pos(maxima) = t(i);
                    local_max(maxima) = h(i);
                end

                if(h(i) < h(i-1) && h(i) < h(i+1))   % find local mimima
                    minima = minima + 1;
                    min_pos(minima) = t(i);
                    local_min(minima) = h(i);
                end

            end
        
            minima = minima + 1;
            maxima = maxima + 1;
            max_pos(maxima) = t(length(t));
            local_max(maxima) = h(length(t));
            min_pos(minima) = t(length(t));
            local_min(minima) = h(length(t));

            % determine whether extremes = boundary, by interpolation method
            interpolation_max_init = local_max(2) - (max_pos(2)-max_pos(1))*(local_max(3)-local_max(2))/(max_pos(3)-max_pos(2));
            interpolation_min_init = local_min(2) - (min_pos(2)-min_pos(1))*(local_min(3)-local_min(2))/(min_pos(3)-min_pos(2));
            interpolation_max_final = local_max(maxima-1) + (max_pos(maxima)-max_pos(maxima-1))*(local_max(maxima-1)-local_max(maxima-2))/(max_pos(maxima-1)-max_pos(maxima-2));
            interpolation_min_final = local_min(minima-1) + (min_pos(minima)-min_pos(minima-1))*(local_min(minima-1)-local_min(minima-2))/(min_pos(minima-1)-min_pos(minima-2));

            if(interpolation_max_init > local_max(1,1))
                local_max(1) = interpolation_max_init;
            end

            if(interpolation_min_init < local_min(1,1))
                local_min(1) = interpolation_min_init;
            end

            if(interpolation_max_final > local_max(1,maxima))
                local_max(maxima) = interpolation_max_final;
            end

            if(interpolation_min_final < local_min(1,minima))
                local_min(minima) = interpolation_min_final;
            end

            upper_envelope = spline(max_pos,local_max,t);
            lower_envelope = spline(min_pos,local_min,t);
        
            % step 7
            condition_1 = ((sum(local_max>0) == maxima) && (sum(local_min<0) == minima));
            condition_2 = abs((upper_envelope + lower_envelope)/2);

            if((condition_1 == 1) && (max(condition_2) < thr))  % check whether IMF sensing is over
                IMF_stop = 1;

            else 
                y = h;
                k = k + 1;
            end

        end
    
        % step 8

        IMF_index(n,:) = h; % output
        x_0 = x;

        for i = 1 : n
            x_0 = x_0 - IMF_index(i,:); 
        end

        y = x_0;
        minima = 0;
        maxima = 0;

        for i = 2 : length(t)-1

            if(y(i) > y(i-1) && y(i) > y(i+1))
                maxima = maxima + 1;
            end

            if(y(i) < y(i-1) && y(i) < y(i+1))
                minima = minima + 1;
            end

        end
    
        if((minima + maxima) < 3)   % stop when the number of non-boundary extremes be more than 3
            hht_stop = 1;
    
        else
            n = n + 1;
            y = x_0;
        end
    
    end

    figure;
    plot(t,x_0);
    title('x0(t)')
    y = IMF_index;
    hold on
    grid on

end
	
